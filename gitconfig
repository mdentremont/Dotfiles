[core]
    autocrlf = input
    editor = nvim
    excludesfile = ~/.gitignore_global
	fileMode = false
	safecrlf = false
[user]
    email = mattdentremont@gmail.com
    name = Matt d'Entremont
[gui]
    gcwarning = false
[alias]
    a = "add"
    b = "branch"
    bv = "branch -vv"
    ci = "commit -v"
    # Disable as it is killing my project files
    #cl = "clean --force -X -d"

    # Forcefully remove all untracked files which do not match the '-e' expressions
    clf = "clean -dfx -e '.gradle' -e 'gradle.properties' -e 'local.properties' -e '.idea' -e '*.iml'"
    co = "checkout"
    cor = "!cor() { br=$(recent_branches | fzf --no-sort --reverse); [[ ${SHELL##*/} == zsh ]] && print -s \"git checkout $br\"; [[ -n $br ]] && git checkout $br;}; cor"
    cp = "cherry-pick"
    cpx = "cherry-pick -x"
    d = "diff"
    dc = "diff --cached"
    dt = "difftool"
    dtc = "difftool --cached"
    f = "fetch --prune"
    fpr = "!fpr() { git fetch -f origin pull/$1/merge:refs/pr/origin/$1/merge ; } ; fpr"
    fa = "fetch --all --prune"
    fixup = "commit --amend --no-edit"
    l = "log --graph"
    lp = "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
    lost = !"git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset %f' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"
    m = "merge"
    mt = "mergetool"
    pl = "pull"
    pr = "pull-request"
    ps = "push"
    r = "rm"
    rb = "rebase"
    s = "status -sb"
    su = "submodule update --init --recursive"
    t = "tag"
    ws = "diff --check"
    wt = "worktree"
    desk = "stash"

    wip="!wip() { br=\"$(git rev-parse --abbrev-ref HEAD)\" && sha=\"$(git rev-parse --short HEAD)\" && name=${br:-${sha}} && git add . && git commit -m\"WIP: ${name}\"; } ; wip"
    unwip="!unwip() { if ! git log -1 --pretty=%s | grep -q '^WIP: '; then echo previous commit was not a WIP: 1>&2; git log -1 --oneline 1>&2; exit 1; else git reset --soft HEAD~1; git status; fi; } ; unwip"

    head = !"git log -n1"
    #lost = !"git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset %f' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"

    # from https://stackoverflow.com/questions/8475448/find-merge-commit-which-include-a-specific-commit
    find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
    show-merge
[rerere]
    enabled = 1
[push]
	default = nothing
[color]
    ui = 1
    branch = auto
    diff = auto
    interactive = auto
    status = auto
[diff]
    tool = bc-windows
[difftool]
    prompt = false
[difftool "bc-windows"]
    cmd = \"/mnt/c/Program Files/Beyond Compare 4/BComp.exe\" /automerge \"$LOCAL\" \"$REMOTE\"
[merge]
	tool = bc-windows
[mergetool]
    prompt = false
	keepBackup = false
[mergetool "bc-windows"]
    keepBackup = false
    trustExitCode = true
    cmd = \"/mnt/c/Program Files/Beyond Compare 4/bcompare\" \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\"
[mergetool "auto"]
    keepBackup = false
    trustExitCode = true
    cmd = \"/mnt/c/Program Files/Beyond Compare 4/bcompare\" -automerge -ignoreunimportant -reviewconflicts \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\"
[gui]
    commitmsgwidth = 72
[grep]
    lineNumber = true
	trustExitCode = true
[hub]
protocol = https
[log]
	date = local
